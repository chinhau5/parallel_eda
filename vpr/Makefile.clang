SRC_ROOT = SRC_TO_BUILD
BUILD_ROOT = build
CXX = g++
OPT = -O2

DIRS = . base pack parallel_route place power route timing util

TARGET = libvpr.a

SRC_DIRS = $(addprefix $(SRC_ROOT)/, $(DIRS))
BUILD_DIRS = $(addprefix $(BUILD_ROOT)/, $(DIRS))

C_SRCS = $(foreach dir, $(SRC_DIRS), $(wildcard $(dir)/*.c))
C_OBJS = $(subst $(SRC_ROOT), $(BUILD_ROOT), $(C_SRCS:.c=.o))

CXX_SRCS = $(foreach dir, $(SRC_DIRS), $(wildcard $(dir)/*.cxx))
CXX_OBJS = $(subst $(SRC_ROOT), $(BUILD_ROOT), $(CXX_SRCS:.cxx=.o))

OBJS = $(C_OBJS) $(CXX_OBJS)
LLS = $(OBJS:.o=.ll)
OPT_LLS = $(OBJS:.o=_opt.ll)

DEPS = $(OBJS:.o=.d)

INCLUDES = $(SRC_DIRS)
INCLUDES += ../libarchfpga/include
INCLUDES += ../printhandler/SRC/TIO_InputOutputHandlers

INCLUDES += /usr/local/include
INCLUDES += /home/chinhau5/zlog/include
INCLUDES += /home/chinhau5/Downloads/metis-5.1.0/include
#INCLUDES += /home/chinhau5/Downloads/tbb2017_20161128oss/include
INCLUDES += /home/chinhau5/Downloads/tbb-2017_U6/include
#INCLUDES += /home/chinhau5/Downloads/boost_1_60_0
INCLUDES += /opt/intel/vtune_amplifier_xe/include

INCLUDES += /home/akkumar/mvapich2-2.2-fast/include
INCLUDES += /home/akkumar/zlog/include
INCLUDES += /home/akkumar/Downloads/metis-5.1.0/include
INCLUDES += /home/akkumar/Downloads/tbb-2017_U6/include
INCLUDES += /home/akkumar/Downloads/boost_1_64_0
INCLUDES += /home/akkumar/libs/include

INCLUDES := $(foreach dir, $(INCLUDES), $(addprefix -I, $(dir)))

HIDE =

.DELETE_ON_ERROR:

#define generateEmitRules
#$(BUILD_ROOT)/$(1)/%.ll: $(SRC_ROOT)/$(1)/%.$(2)
	#@echo Emitting $$@
	#$(HIDE)$(CXX) $(OPT) -emit-llvm -std=c++11 -MMD $$(INCLUDES) -S -o $$@ $$< 
#endef

#define generateOptRules
#$(BUILD_ROOT)/$(1)/%_opt.ll: $(BUILD_ROOT)/$(1)/%.ll /home/chinhau5/scratchpad/llvm_pass/build/libSkeletonPass.so 
	#@echo Instrumenting $$@
	#$(HIDE)opt -load /home/chinhau5/scratchpad/llvm_pass/build/libSkeletonPass.so -hello -S -o $$@ $$< 
#endef

#define generateAsmRules
#$(BUILD_ROOT)/$(1)/%.o: $(BUILD_ROOT)/$(1)/%_opt.ll
	#@echo Assembling $$@
	#$(HIDE)$(CXX) $(OPT) -std=c++11 -c -o $$@ $$< 
#endef

define generateRules
$(BUILD_ROOT)/$(1)/%.o: $(SRC_ROOT)/$(1)/%.$(2)
	@echo Building $$@
	@touch $$@
	$(HIDE)$(CXX) -g $(OPT) -std=c++11 -Wall -Wno-sign-compare -MMD -MF $$(@:.o=.d.tmp) $$(INCLUDES) -c -o $$@ $$< && mv $$(@:.o=.d.tmp) $$(@:.o=.d) 
endef

.SECONDARY: $(LLS) $(OPT_LLS)

# Indicate to make which targets are not files
# .PHONY: all clean directories 
#
# all: directories $(TARGET)
#
# $(TARGET): $(OBJS)
#     $(HIDE)echo Linking $@
#         $(HIDE)$(CC) $(OBJS) -o $(TARGET)
#
#         # Include dependencies
-include $(DEPS)

# Generate rules
$(foreach dir, $(DIRS), $(eval $(call generateRules,$(dir),c)))
$(foreach dir, $(DIRS), $(eval $(call generateRules,$(dir),cxx)))
#$(foreach dir, $(DIRS), $(eval $(call generateEmitRules,$(dir),c)))
#$(foreach dir, $(DIRS), $(eval $(call generateEmitRules,$(dir),cxx)))
#$(foreach dir, $(DIRS), $(eval $(call generateOptRules,$(dir))))
#$(foreach dir, $(DIRS), $(eval $(call generateAsmRules,$(dir))))

$(BUILD_DIRS):
	@echo "Creating build dirs" 
	mkdir -p $@

$(OBJS): | $(BUILD_DIRS)

$(BUILD_ROOT)/$(TARGET): $(OBJS)
	ar rcs $@ $(OBJS)

.PHONY: all clean clean_opt_ll clean_objs

all: $(BUILD_ROOT)/$(TARGET)

clean_opt_ll:
	rm -f $(OPT_LLS)

clean_objs:
	rm -f $(OBJS)

clean: clean_opt_ll clean_objs
	rm -f $(BUILD_ROOT)/$(TARGET)
	rm -f $(DEPS)
	rm -f $(LLS)
